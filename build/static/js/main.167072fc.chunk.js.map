{"version":3,"sources":["components/Field.js","components/Growth.js","components/StockPrice.js","components/App.js","serviceWorker.js","index.js"],"names":["Field","values","onFieldChange","index","type","value","onChange","e","target","Growth","growths","StockPrice","useState","netIncome","setNetIncome","growth","setGrowth","stocks","setStocks","price","setPrice","useEffect","nig","parseInt","className","calculateGrowth","current","prev","years","parseFloat","Math","pow","toFixed","App","useReducer","state","action","localStorage","JSON","parse","setValues","setGrowths","setGrowthForIndex","stringify","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.167072fc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Field = ({ values, onFieldChange, index }) => (\r\n  <label>\r\n    <span>Latest result {index > 0 && `- ${index}y`}</span>\r\n    <input type=\"text\" value={values[index]} onChange={(e) => onFieldChange(e.target.value, index)} />\r\n  </label>\r\n);\r\n\r\nexport default Field;\r\n","import React from 'react';\r\n\r\nconst Growth = ({ growths, index }) => (\r\n  <div>\r\n    <span>Growth last {index > 1 && index} year{index > 1 && 's'}: </span>\r\n    <span>{growths[index]}{growths[index] && '%'}</span>\r\n  </div>\r\n);\r\n\r\nexport default Growth;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst StockPrice = () => {\r\n  const [netIncome, setNetIncome] = useState('');\r\n  const [growth, setGrowth] = useState('');\r\n  const [stocks, setStocks] = useState('');\r\n  const [price, setPrice] = useState();\r\n\r\n  useEffect(() => {\r\n    if (netIncome > 0 && growth > 0 && stocks > 0) {\r\n      const nig = growth / 100 + 1;\r\n\r\n      setPrice(\r\n        parseInt(\r\n          (netIncome * (1 + nig ** 1 + nig ** 2 + nig ** 3 + nig ** 4 + nig ** 5 + nig ** 6 + nig ** 7 + nig ** 8 + nig ** 9 + nig ** 10)) / stocks,\r\n          10\r\n        )\r\n      )\r\n    }\r\n  }, [netIncome, growth, stocks])\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Having the current Net Income, the future Net Icome Growth (NIG), and the Number of Stocks,\r\n      </p>\r\n      <p>\r\n        Calculate Stock Price based on the idea that the investment should pay off in 10 years if you look at the entire business\r\n        with the following formula:\r\n      </p>\r\n      <p>\r\n        (Net Income * (1 + NIG ** 1 + NIG ** 2 + NIG ** 3 + NIG ** 4 + NIG ** 5 + NIG ** 6 + NIG ** 7 + NIG ** 8 + NIG ** 9 + NIG ** 10)) / Number of Stocks\r\n      </p>\r\n\r\n      <div className=\"fields\">\r\n        <label>\r\n          <span>Net Income (e.g. 30736)</span>\r\n          <input type=\"text\" value={netIncome} onChange={(e) => setNetIncome(e.target.value)} />\r\n        </label>\r\n        <label>\r\n          <span>Net Income Growth % (e.g. 10)</span>\r\n          <input type=\"text\" value={growth} onChange={(e) => setGrowth(e.target.value)} />\r\n        </label>\r\n        <label>\r\n          <span>Number of Stocks (e.g. 703)</span>\r\n          <input type=\"text\" value={stocks} onChange={(e) => setStocks(e.target.value)} />\r\n        </label>\r\n      </div>\r\n\r\n      <div>\r\n        Price: <span className=\"price\">{price}</span>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default StockPrice;\r\n","import React, { useReducer, useEffect } from 'react';\nimport Field from './Field';\nimport Growth from './Growth';\nimport StockPrice from './StockPrice';\nimport './App.scss';\n\nconst calculateGrowth = ({ current, prev, years }) => (\n  parseFloat((Math.pow(current / prev, 1 / years) - 1) * 100).toFixed(2) /* eslint no-restricted-properties: 0 */\n);\n\nfunction App() {\n  const [values, setValues] = useReducer((state = {}, action) => {\n    switch (action.type) {\n      case 'SET_VALUE':\n        return {\n          ...state,\n          [action.index]: action.value\n        };\n      case 'CLEAR_ALL':\n        return {\n          '0': '',\n          '1': '',\n          '2': '',\n          '5': '',\n          '10': ''\n        };\n      default:\n        return state;\n    }\n  }, localStorage.values ? JSON.parse(localStorage.values) : {});\n\n  const [growths, setGrowths] = useReducer((state = {}, action) => {\n    switch (action.type) {\n      case 'SET_VALUE':\n        return {\n          ...state,\n          [action.index]: action.value\n        };\n      case 'CLEAR_ALL':\n        return {\n          '1': '',\n          '2': '',\n          '5': '',\n          '10': ''\n        };\n      default:\n        return state;\n    }\n  }, {});\n\n  useEffect(() => {\n    setGrowthForIndex(1);\n  }, [values[0], values[1]]);\n\n  useEffect(() => {\n    setGrowthForIndex(2);\n  }, [values[0], values[2]]);\n\n  useEffect(() => {\n    setGrowthForIndex(5);\n  }, [values[0], values[5]]);\n\n  useEffect(() => {\n    setGrowthForIndex(10);\n  }, [values[0], values[10]]);\n\n  useEffect(() => {\n    localStorage.values = JSON.stringify(values);\n  }, [values]);\n\n  const setGrowthForIndex = (index) => {\n    values[0] && values[index] && setGrowths({\n      type: 'SET_VALUE',\n      index,\n      value: calculateGrowth({\n        current: values[0],\n        prev: values[index],\n        years: index\n      })\n    });\n  };\n\n  const onFieldChange = (value, index) => {\n    setValues({\n      type: 'SET_VALUE',\n      index,\n      value\n    });\n  };\n\n  const clearAll = () => {\n    setValues({\n      type: 'CLEAR_ALL'\n    });\n\n    setGrowths({\n      type: 'CLEAR_ALL'\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"row\">\n        <div className=\"fields\">\n          <Field index={0} values={values} onFieldChange={onFieldChange} />\n          <Field index={1} values={values} onFieldChange={onFieldChange} />\n          <Field index={2} values={values} onFieldChange={onFieldChange} />\n          <Field index={5} values={values} onFieldChange={onFieldChange} />\n          <Field index={10} values={values} onFieldChange={onFieldChange} />\n          <div className=\"clear\" onClick={clearAll}>Clear all</div>\n        </div>\n\n        <div className=\"growth\">\n          <Growth growths={growths} index={1} />\n          <Growth growths={growths} index={2} />\n          <Growth growths={growths} index={5} />\n          <Growth growths={growths} index={10} />\n        </div>\n      </div>\n\n      <div className=\"row stock-price\">\n        <StockPrice />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}